"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.uniAppIOSPlugin = void 0;
const fs_extra_1 = __importDefault(require("fs-extra"));
const uni_cli_shared_1 = require("@dcloudio/uni-cli-shared");
const utils_1 = require("../utils");
const REMOVED_PLUGINS = [
    'vite:build-metadata',
    'vite:modulepreload-polyfill',
    'vite:css',
    'vite:esbuild',
    'vite:wasm-helper',
    'vite:worker',
    // 'vite:asset', // replace
    'vite:wasm-fallback',
    'vite:define',
    'vite:css-post',
    'vite:build-html',
    'vite:html-inline-proxy',
    'vite:worker-import-meta-url',
    'vite:asset-import-meta-url',
    'vite:force-systemjs-wrap-complete',
    'vite:watch-package-data',
    'commonjs',
    'vite:data-uri',
    'vite:dynamic-import-vars',
    'vite:import-glob',
    'vite:build-import-analysis',
    'vite:esbuild-transpile',
    'vite:terser',
    'vite:reporter',
];
function uniAppIOSPlugin() {
    const inputDir = process.env.UNI_INPUT_DIR;
    const outputDir = process.env.UNI_OUTPUT_DIR;
    // 开始编译时，清空输出目录
    function emptyOutDir() {
        if (fs_extra_1.default.existsSync(outputDir)) {
            (0, uni_cli_shared_1.emptyDir)(outputDir);
        }
    }
    emptyOutDir();
    return {
        name: 'uni:app-uts',
        apply: 'build',
        uni: (0, utils_1.createUniOptions)(),
        config() {
            return {
                base: '/',
                build: {
                    emptyOutDir: false,
                    assetsInlineLimit: 0,
                    rollupOptions: {
                        input: (0, uni_cli_shared_1.resolveMainPathOnce)(inputDir),
                        external: ['vue', '@vue/shared'],
                        output: {
                            name: 'AppService',
                            banner: ``,
                            format: 'iife',
                            entryFileNames: uni_cli_shared_1.APP_SERVICE_FILENAME,
                            globals: {
                                vue: 'Vue',
                                '@vue/shared': 'uni.VueShared',
                            },
                        },
                    },
                },
            };
        },
        configResolved(config) {
            const plugins = config.plugins;
            const len = plugins.length;
            for (let i = len - 1; i >= 0; i--) {
                const plugin = plugins[i];
                if (REMOVED_PLUGINS.includes(plugin.name)) {
                    plugins.splice(i, 1);
                }
            }
        },
    };
}
exports.uniAppIOSPlugin = uniAppIOSPlugin;
